name: app deployment example

# The Docker Hub is used for a container registry in this example pipeline.
# My projects are using AWS ECR as a registry in the production pipeline.

on:
  push:
    tags:
      - v20[0-9][0-9].*-APP

env:
  JAVA_VERSION: 21
  JAVA_DIST: 'temurin'
  PROFILE: 'prod'
  TAG_NAME: "${{ github.ref_name }}"
  APP_NAME: 'cicd-demo'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}

      - name: Cache gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # The DB validation step can be added before testing app.
      - name: Test
        run: ./gradlew clean test

      # you cna add Slack notification to each job if needed.
#      - name: Notification to Slack Channel
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
#        if: failure()

  deploy:
    needs: [validate]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}

      - name: Cache gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # https://hub.docker.com/r/hbleejoy/cicd-demo
      - name: Build Docker & Push to Registry
        env:
          REGISTRY: docker.io
          DOCKER_NAMESPACE: ${{ vars.DOCKERHUB_USERNAME }}
        run: >
          ./gradlew clean jib
          -Djib.to.image=${{ env.REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ env.APP_NAME }}
          -DdeployTag=${{ env.TAG_NAME }}

  push_chart_repo:
    needs: [deploy]
    runs-on: ubuntu-latest
    env:
      CHART_REF_BRANCH: main
    steps:
      - name: Checkout Chart Repository
        uses: actions/checkout@v5
        with:
          repository: copebble/app-chart-demo
          ssh-key: ${{ secrets.CHART_DEPLOY_KEY }}
          ref: ${{ env.CHART_REF_BRANCH }}

      - name: Update Tag Name
        env:
          VALUES_YAML: values-${{ env.PROFILE }}-${{ env.APP_NAME }}.yaml
        run: |
          sed -i '/tag:/c\  tag: ${{ env.TAG_NAME }}' ${{ env.VALUES_YAML }}
          git config user.email "copebble-actions@example.com"
          git config user.name "copebble-actions-bot"
          git add ${{ env.VALUES_YAML }}
          git commit -m "change tag name: ${{ env.TAG_NAME }}"
          git push origin ${{ env.CHART_REF_BRANCH }}
